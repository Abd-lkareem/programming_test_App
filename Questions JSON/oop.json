[
    {
        "id":1,
        "qusetion":" ' Which function is called when the following Python code is executed? f = foo() format(f) ' ",
        "incorrect_answer":["format()"," __format__()","str()"],
        "correct_answer":" __str__()"
    },

    {
        "id":2,
        "qusetion":" ' Which function overloads the + operator? ' ",
        "incorrect_answer":[" __plus__()"," __sum__()","none of the mentioned"],
        "correct_answer":" __add__()"
    },

    {
        "id":3,
        "qusetion":" ' Which operator is overloaded by __invert__()? ' ",
        "incorrect_answer":["!","^","-"],
        "correct_answer":"~"
    },

    {
        "id":4,
        "qusetion":" ' Which function overloads the == operator? ' ",
        "incorrect_answer":[" __equ__()"," __isequal__()","none of the mentioned"],
        "correct_answer":" __eq__()"
    },

    {
        "id":5,
        "qusetion":" ' Which operator is overloaded by __lg__()? ' ",
        "incorrect_answer":["<",">","!="],
        "correct_answer":"none of the mentioned"
    },

    {
        "id":6,
        "qusetion":" ' Which function overloads the >> operator ' ",
        "incorrect_answer":["__more__()"," __gt__()"," __ge__()"],
        "correct_answer":"none of the mentioned"
    },

    {
        "id":7,
        "qusetion":" ' Let A and B be objects of class Foo. Which functions are called when print(A + B) is executed? ' ",
        "incorrect_answer":[" __str__(), __add__()"," __sum__(), __str__()"," __str__(), __sum__()"],
        "correct_answer":" __add__(), __str__()"
    },

    {
        "id":8,
        "qusetion":" ' Which operator is overloaded by the __or__() function? ' ",
        "incorrect_answer":["||","//","/"],
        "correct_answer":"|"
    },

    {
        "id":9,
        "qusetion":" ' Which function overloads the // operator? ' ",
        "incorrect_answer":[" __div__()"," __ceildiv__()"," __truediv__()"],
        "correct_answer":" __oordiv__()"
    },

    {
        "id":10,
        "qusetion":" ' . _____ represents an entity in the real world with its identity and behaviour. ' ",
        "incorrect_answer":[" A method","A class","An operator"],
        "correct_answer":"An object"
    },

    {
        "id":11,
        "qusetion":" '  _____ is used to create an object ' ",
        "incorrect_answer":["In-built functions","User-den","class"],
        "correct_answer":"constructor"
    },

    {
        "id":12,
        "qusetion":" ' What will be the output of the following Python code? class test:  def __init__(self,a='Hello World'):  self.a=a  def display(self):  print(self.a) obj=test() obj.display() ' ",
        "incorrect_answer":["The program has an error because constructor can�t have default arguments","Nothing is displayed","The program has an error display function doesn�t have parameters"],
        "correct_answer":"�Hello World� is displayed"
    },

    {
        "id":13,
        "qusetion":" ' What is setattr() used for? ' ",
        "incorrect_answer":["To access the attribute of the object","To check if an attribute exists or not","To delete an attribute"],
        "correct_answer":"To set an attribute"
    },

    {
        "id":14,
        "qusetion":" ' What is getattr() used for? ' ",
        "incorrect_answer":[" To delete an attribute","To check if an attribute exists or not","To set an attribute"],
        "correct_answer":"To access the attribute of the object"
    },

    {
        "id":15,
        "qusetion":" ' What will be the output of the following Python code? class change:  def __init__(self, x, y, z):  self.a = x + y + z x = change(1,2,3) y = getattr(x, 'a') setattr(x, 'a', y+1) print(x.a) ' ",
        "incorrect_answer":["6","Error","0"],
        "correct_answer":"7"
    },

    {
        "id":16,
        "qusetion":" ' What will be the output of the following Python code? class test:  def __init__(self,a):  self.a=a  def display(self):   print(self.a) obj=test() obj.display() ' ",
        "incorrect_answer":["Runs normally, doesn�t display anything","Displays 0, which is the automatic default value","Error as display function requires additional argument"],
        "correct_answer":"Error as one argument is required while creating the objec"
    },

    {
        "id":17,
        "qusetion":" ' Is the following Python code correct? >>> class A: def __init__(self,b): self.b=b def display(self): print(self.b) >>> obj=A('Hello') >>> del obj ' ",
        "incorrect_answer":["False"],
        "correct_answer":" True"
    },

    {
        "id":18,
        "qusetion":" ' What will be the output of the following Python code? class test:  def __init__(self):  self.variable = 'Old'  self.Change(self.variable)  def Change(self, var):  var = 'New' obj=test() print(obj.variable) ' ",
        "incorrect_answer":["Error because function change can�t be called in the __init__ function","�New� is printed"," Nothing is printed"],
        "correct_answer":"�Old� is printed"
    },

    {
        "id":19,
        "qusetion":" ' What is Instantiation in terms of OOP terminology? ' ",
        "incorrect_answer":["Deleting an instance of class","Modifying an instance of class","Copying an instance of class"],
        "correct_answer":"Creating an instance of class"
    },

    {
        "id":20,
        "qusetion":" ' Is the following Python code valid? class B(object):  def first(self):  print('First method called')  def second():  print('Second method called') ob = B() B.first(ob) ' ",
        "incorrect_answer":["It isn�t as the object declaration isn�t right","It isn�t as there isn�t any __init__ method for initializing class members","Yes, this method of calling is called bounded method call"],
        "correct_answer":" Yes, this method of calling is called unbounded method call"
    },

    {
        "id":21,
        "qusetion":" ' What are the methods which begin and end with two underscore characters called? ' ",
        "incorrect_answer":["In-built methods","User-dened methods","Additional methods"],
        "correct_answer":"Special methods"
    },

    {
        "id":22,
        "qusetion":" ' What will be the output of the following Python code? >>> class demo(): def __repr__(self): return '__repr__ built-in function called' def __str__(self): return '__str__ built-in function called' >>> s=demo() >>> print(s) ' ",
        "incorrect_answer":["Error","Nothing is printed"," __repr__ called"],
        "correct_answer":" __str__ called"
    },

    {
        "id":23, 
        "qusetion":" ' What will be the output of the following Python code? class stud:  def __init__(self, roll_no, grade):  self.roll_no = roll_no  self.grade = grade  def display (self):  print('Roll no : ', self.roll_no, ', Grade: ', self.grade) stud1 = stud(34, 'S') stud1.age=7 print(hasattr(stud1, 'age')) ' ",
        "incorrect_answer":["Error as age isn�t dened","False","7"],
        "correct_answer":"True"
    },

    {
        "id":24,
        "qusetion":" ' Which of the following best describes inheritance? ' ",
        "incorrect_answer":["Means of bundling instance variables and methods in order to restrict access to certain class members","Focuses on variables and passing of variables to functions","Allows for implementation of elegant software that is well designed and easily modied"],
        "correct_answer":"Ability of a class to derive members of another class as a part of its own denition"
    },

    {
        "id":25,
        "qusetion":" ' Which of the following statements is wrong about inheritance? ' ",
        "incorrect_answer":["Protected members of a class can be inherited","The inheriting class is called a subclass","Inheritance is one of the features of O"],
        "correct_answer":"Private members of a class can be inherited and accessed"
    },

    {
        "id":26,
        "qusetion":" ' What will be the output of the following Python code? class Test:  def __init__(self):  self.x = 0 class Derived_Test(Test):  def __init__(self):  self.y = 1 def main():  b = Derived_Test()  print(b.x,b.y) main()  ' ",
        "incorrect_answer":["0 1","0 0"," Error because when object is created, argument must be passed like Derived_Test(1)"],
        "correct_answer":"Error because class B inherits A but variable x isn�t inherited"
    },

    {
        "id":27,
        "qusetion":" ' What will be the output of the following Python code? class A():  def disp(self):  print('A disp()') class B(A):  pass obj = B() obj.disp() ' ",
        "incorrect_answer":["Invalid syntax for inheritance","Error because when object is created, argument must be passed","Nothing is printed"],
        "correct_answer":"A disp()"
    },

    {
        "id":28,
        "qusetion":" ' All subclasses are a subtype in object-oriented programming ' ",
        "incorrect_answer":["True"],
        "correct_answer":"False"
    },

    {
        "id":29,
        "qusetion":" ' When dening a subclass in Python that is meant to serve as a subtype, the subtype Python keyword is used ' ",
        "incorrect_answer":["True"],
        "correct_answer":"False"
    },

    {
        "id":30,
        "qusetion":" ' Suppose B is a subclass of A, to invoke the __init__ method in A from B, what is the line of code you should write? ' ",
        "incorrect_answer":["B.__init__(self)","A.__init__(B)","B.__init__(A)"],
        "correct_answer":"A.__init__(self)"
    },

    {
        "id":31,
        "qusetion":" ' What will be the output of the following Python code? class Test:  def __init__(self):  self.x = 0 class Derived_Test(Test):  def __init__(self):  Test.__init__(self)  self.y = 1 def main():  b = Derived_Test()  print(b.x,b.y) main() ' ",
        "incorrect_answer":["Error because class B inherits A but variable x isn�t inherited","0 0","Error, the syntax of the invoking method is wrong"],
        "correct_answer":"0 1"
    },

    {
        "id":32,
        "qusetion":" ' What does single-level inheritance mean? ' ",
        "incorrect_answer":[" A subclass derives from a class which in turn derives from another class","A single superclass inherits from multiple subclasses","Multiple base classes inherit a single derived class"],
        "correct_answer":"A single subclass derives from a single superclass"
    },

    {
        "id":33,
        "qusetion":" ' What will be the output of the following Python code? class A:  def __init__(self):  self.__i = 1  self.j = 5  def display(self):  print(self.__i, self.j) class B(A):  def __init__(self):  super().__init__()  self.__i = 2  self.j = 7 c = B() c.display() ' ",
        "incorrect_answer":["2 7","1 5","2 5"],
        "correct_answer":"1 7"
    },

    {
        "id":34,
        "qusetion":" ' What will be the output of the following Python code? class A:  def __init__(self,x):  self.x = x  def count(self,x):  self.x = self.x+1 class B(A):  def __init__(self, y=0):  A.__init__(self, 3)  self.y = y  def count(self):  self.y += 1 def main():  obj = B()  obj.count()  print(obj.x, obj.y) main() ' ",
        "incorrect_answer":["3 0","0 1","An exception in thrown"],
        "correct_answer":"3 1"
    },

    {
        "id":35,
        "qusetion":" ' What will be the output of the following Python code? >>> class A: pass >>> class B(A): pass >>> obj=B() >>> isinstance(obj,A) ' ",
        "incorrect_answer":["False","Wrong syntax for isinstance() method","Invalid method for classes"],
        "correct_answer":"True"
    },

    {
        "id":36,
        "qusetion":" ' Which of the following statements is true? ' ",
        "incorrect_answer":["The __new__() method automatically invokes the __init__ method","The __init__ method is dened in the object class","The __repr__() method is dened in the object class"],
        "correct_answer":"The __eq(other) method is dened in the object class"
    },

    {
        "id":37,
        "qusetion":" ' What will be the output of the following Python code? class A:  def __init__(self):  self.__x = 1 class B(A):  def display(self):  print(self.__x) def main():  obj = B()  obj.display() main() ' ",
        "incorrect_answer":["1","0","Error, invalid syntax for object declaration"],
        "correct_answer":"Error, private class member can�t be accessed in a subclass"
    },

    {
        "id":38,
        "qusetion":" ' What will be the output of the following Python code? class A:  def __init__(self):  self._x = 5 class B(A):  def display(self):  print(self._x) def main():  obj = B()  obj.display() main() ' ",
        "incorrect_answer":["Error, invalid syntax for object declaration","Nothing is printed","Error, private class member can�t be accessed in a subclass"],
        "correct_answer":"5"
    },

    {
        "id":39,
        "qusetion":" ' What will be the output of the following Python code ? class A:  def __init__(self,x=3):  self._x = x class B(A):  def __init__(self):  super().__init__(5)  def display(self):  print(self._x) def main():  obj = B()  obj.display() main() ' ",
        "incorrect_answer":["3","Error, class member x has two values","Error, protected class member can�t be accessed in a subclass"],
        "correct_answer":"5"
    },

    {
        "id":40,
        "qusetion":" ' What will be the output of the following Python code? class A:  def one(self):  return self.two()  def two(self):  return 'A' class B(A):  def two(self):  return 'B' obj1=A() obj2=B() print(obj1.two(),obj2.two()) ' ",
        "incorrect_answer":["A A","B B","An exception is thrown"],
        "correct_answer":" A B"
    },

    {
        "id":41,
        "qusetion":" ' Which of the following best describes polymorphism? ' ",
        "incorrect_answer":["Ability of a class to derive members of another class as a part of its own denition","Means of bundling instance variables and methods in order to restrict access to certain class members","Focuses on variables and passing of variables to functions"],
        "correct_answer":"Allows for objects of dierent types and behaviour to be treated as the same general type"
    },
 {
        "id":42,
        "qusetion":"",
        "incorrect_answer":["It allows the programmer to think at a more abstract leve","There is less program code to write","Program code takes up less space"],
        "correct_answer":"The program will have a more elegant design and will be easier to maintain and update"
    }, {
        "id":43,
        "qusetion":" ' What is the use of duck typing? ' ",
        "incorrect_answer":["More restriction on the type values that can be passed to a given method","No restriction on the type values that can be passed to a given method","Makes the program code smaller"],
        "correct_answer":" Less restriction on the type values that can be passed to a given method"
    }, {
        "id":44,
        "qusetion":" ' What will be the output of the following Python code? class A:  def __str__(self):  return '1' class B(A):  def __init__(self):  super().__init__() class C(B):  def __init__(self):  super().__init__() def main():  obj1 = B()  obj2 = A()  obj3 = C()  print(obj1, obj2,obj3) main() ' ",
        "incorrect_answer":["1 2 3","�1� �1� �1�","An exception is thrown"],
        "correct_answer":"1 1 1"
    },
 {
        "id":45,
        "qusetion":" ' What will be the output of the following Python code? class Demo:  def __init__(self):  self.x = 1  def change(self):  self.x = 10 class Demo_derived(Demo):  def change(self):  self.x=self.x+1  return self.x def main():  obj = Demo_derived()  print(obj.change()) main() ' ",
        "incorrect_answer":["11","1","An exception is thrown"],
        "correct_answer":"2"
    }
    , {
        "id":46,
        "qusetion":" ' A class in which one or more methods are only implemented to raise an exception is called an abstract class. ' ",
        "incorrect_answer":["False"],
        "correct_answer":"True"
    }, 
{
        "id":47,
        "qusetion":" ' Overriding means changing behaviour of methods of derived class methods in the base class ' ",
        "incorrect_answer":["True"],
        "correct_answer":"False"
    },
 {
        "id":48,
        "qusetion":" ' What will be the output of the following Python code? class A:  def __repr__(self):  return '1' class B(A):  def __repr__(self):  return '2' class C(B):  def __repr__(self):  return '3' o1 = A() o2 = B() o3 = C() print(obj1, obj2, obj3) ' ",
        "incorrect_answer":["1 1 1","�1� �1� �1�","An exception is thrown"],
        "correct_answer":"1 2 3"
    }, 
{
        "id":49,
        "qusetion":" ' What will be the output of the following Python code? class A:  def __init__(self):  self.multiply(15)  print(self.i)  def multiply(self, i):  self.i = 4 * i; class B(A):  def __init__(self):  super().__init__()  def multiply(self, i):  self.i = 2 * i; obj = B() ' ",
        "incorrect_answer":["15","60","An exception is thrown"],
        "correct_answer":"30"
    }, 
{
        "id":50,
        "qusetion":" ' What will be the output of the following Python code? class Demo:  def check(self):  return ' Demo's check '  def display(self):  print(self.check()) class Demo_Derived(Demo):  def check(self):  return 'Derived's check ' Demo().display() Demo_Derived().display() ' ",
        "incorrect_answer":["Demo�s check Demo�s check","Derived�s check Demo�s check","Syntax error"],
        "correct_answer":" Demo�s check Derived�s check"
    },
 {
        "id":51,
        "qusetion":" ' What will be the output of the following Python code? class A:  def __init__(self):  self.multiply(15)  def multiply(self, i):  self.i = 4 * i; class B(A):  def __init__(self):  super().__init__()  print(self.i)  def multiply(self, i):  self.i = 2 * i; obj = B() ' ",
        "incorrect_answer":["15","60","An exception is thrown"],
        "correct_answer":"30"
    }, 
{
        "id":52,
        "qusetion":" ' What will be the output of the following Python code? class Demo:  def __check(self):  return ' Demo's check '  def display(self):  print(self.check()) class Demo_Derived(Demo):  def __check(self):  return ' Derived's check ' Demo().display() Demo_Derived().display() ' ",
        "incorrect_answer":["Demo�s check Derived�s check","Derived�s check Demo�s check","Syntax error"],
        "correct_answer":"Demo�s check Demo�s check"
    }, 
{
        "id":53,
        "qusetion":" ' What will be the output of the following Python code? class A:  def __init__(self, x, y):  self.x = x  self.y = y  def __str__(self):  return 1  def __eq__(self, other):  return self.x * self.y == other.x * other.y obj1 = A(5, 2) obj2 = A(2, 5) print(obj1 == obj2) ' ",
        "incorrect_answer":["False","1","An exception is thrown"],
        "correct_answer":"True"
    },
 {
        "id":54,
        "qusetion":" ' What will be the output of the following Python code? class A:  def one(self):  return self.two()  def two(self):  return 'A' class B(A):  def two(self):  return 'B' obj2=B() print(obj2.two()) ' ",
        "incorrect_answer":["A","A B","An exception is thrown"],
        "correct_answer":"B"
    },
 {
        "id":55,
        "qusetion":" ' Which of the following statements is true? ' ",
        "incorrect_answer":["A subclass method can be overridden by the superclass","A private method in a superclass can be overridden","Overriding isn�t possible in Python"],
        "correct_answer":"A non-private method in a superclass can be overridden"
    },
 {
        "id":56,
        "qusetion":" ' Which of these is not a fundamental features of OOP? ' ",
        "incorrect_answer":["Encapsulation","Inheritance","Polymorphism"],
        "correct_answer":"Instantiation"
    },
 {
        "id":57,
        "qusetion":" ' What will be the output of the following Python code? class Demo:  def __init__(self):  self.a = 1  self.__b = 1  def display(self):  return self.__b obj = Demo() print(obj.a) ' ",
        "incorrect_answer":["The program has an error because there isn�t any function to return self.a","The program has an error because b is private and display(self) is returning a private member","The program has an error as you can�t name a class member using __b"],
        "correct_answer":"The program runs ne and 1 is printed"
    },
 {
        "id":58,
        "qusetion":" ' What will be the output of the following Python code? class Demo: def __init__(self):  self.a = 1  self.__b = 1  def display(self):  return self.__b obj = Demo() print(obj.__b) ' ",
        "incorrect_answer":["The program has an error because there isn�t any function to return self.a","The program runs ne and 1 is printed","The program has an error because b is private and display(self) is returning a private member"],
        "correct_answer":"The program has an error because b is private and hence can�t be printed"
    }
, {
        "id":59,
        "qusetion":" ' Methods of a class that provide access to private members of the class are called as ______ and ______ ' ",
        "incorrect_answer":[" __repr__/__str_","user-dened functions/in-built functions"," __init__/__del__"],
        "correct_answer":"getters/setters"
    }, 
{
        "id":60, 
        "qusetion":" ' Which of these is a private data eld? def Demo: def __init__(self):  __a = 1  self.__b = 1  self.__c__ = 1  __d__= 1 ' ",
        "incorrect_answer":[" __a"," __c__"," __d__"],
        "correct_answer":" __b"
    },
 {
        "id":61,
        "qusetion":" ' What will be the output of the following Python code? class Demo:  def __init__(self):  self.a = 1  self.__b = 1  def get(self):  return self.__b obj = Demo() print(obj.get()) ' ",
        "incorrect_answer":["The program has an error because there isn�t any function to return self.a","The program has an error because b is private and display(self) is returning a private member","The program has an error because b is private and hence can�t be printed"],
        "correct_answer":"The program runs ne and 1 is printed"
    },
 {
        "id":62,
        "qusetion":" ' What will be the output of the following Python code? class Demo:  def __init__(self):  self.a = 1  self.__b = 1  def get(self):  return self.__b obj = Demo() obj.a=45 print(obj.a) ' ",
        "incorrect_answer":["The program runs properly and prints 1","The program has an error because the value of members of a class can�t be changed from outside the class","The program has an error because the value of members outside a class can only be changed as self.a=45"],
        "correct_answer":"The program runs properly and prints 45"
    },
 {
        "id":63,
        "qusetion":" ' Private members of a class cannot be accessed. ' ",
        "incorrect_answer":["True"],
        "correct_answer":"False"
    }, 
{
        "id":64,
        "qusetion":" ' The purpose of name mangling is to avoid unintentional access of private class members. ' ",
        "incorrect_answer":["False"],
        "correct_answer":"True"
    }, 
{
        "id":65,
        "qusetion":" ' What will be the output of the following Python code? class fruits:  def __init__(self):  self.price = 100  self.__bags = 5  def display(self): print(self.__bags) obj=fruits() obj.display() ' ",
        "incorrect_answer":["The program has an error because display() is trying to print a private class member","The program runs ne but nothing is printed","The program has an error because display() can�t be accessed"],
        "correct_answer":"The program runs ne and 5 is printed"
    },
  {
        "id":67,
        "qusetion":" ' What will be the output of the following Python code? class student:  def __init__(self):  self.marks = 97  self.__cgpa = 8.7  def display(self):  print(self.marks) obj=student() print(obj._student__cgpa) ' ",
        "incorrect_answer":["Error because private class members can�t be accessed","Error because the proper syntax for name mangling hasn�t been implemented","The program runs ne but nothing is printed"],
        "correct_answer":"The program runs ne and 8.7 is printed"
    }, 
{
        "id":68,
        "qusetion":" ' Which of the following is false about protected class members ? ' ",
        "incorrect_answer":["They begin with one underscore","They can be accessed by subclasses","They can be accessed within a class"],
        "correct_answer":"They can be accessed by name mangling method"
    },
 {
        "id":69,
        "qusetion":" ' What will be the output of the following Python code? class objects:  def __init__(self):  self.colour = None  self._shape = 'Circle'  def display(self, s):  self._shape = s obj=objects() print(obj._objects_shape) ' ",
        "incorrect_answer":["The program runs ne because name mangling has been properly implemented","Error because the proper syntax for name mangling hasn�t been implemented","Error because the member shape is a private member"],
        "correct_answer":"Error because the member shape is a protected member"
    }
]